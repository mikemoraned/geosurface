// Generated by CoffeeScript 1.6.3
(function() {
  var _this = this;

  console.log("Running");

  d3.csv("datamanip/ontime_geohashes.csv", function(csv) {
    var GeoHashLevel2PairMinMax, all, colors, dimensions, facts, groupMinMax, groups;
    console.log("Loaded csv, number of rows: " + csv.length);
    facts = crossfilter(csv);
    all = facts.groupAll();
    console.log("Creating dimensions ...");
    dimensions = {
      Origin: facts.dimension(function(d) {
        return d.Origin;
      }),
      GeoHashPair: facts.dimension(function(d) {
        return "" + d.Origin_Hash + "," + d.Dest_Hash;
      }),
      GeoHashLevel2Pair: facts.dimension(function(d) {
        return "" + d.Origin_Hash.slice(0, 2) + "->" + d.Dest_Hash.slice(0, 2);
      })
    };
    console.log("Created dimensions");
    console.log("Creating groups ...");
    groups = {
      GeoHashLevel2Pair: dimensions.GeoHashLevel2Pair.group()
    };
    console.log("Created groups");
    groupMinMax = function(group) {
      var pairs, values;
      values = (function() {
        var _i, _len, _ref, _results;
        _ref = group.all();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pairs = _ref[_i];
          _results.push(pairs.value);
        }
        return _results;
      })();
      return [d3.min(values), d3.max(values)];
    };
    GeoHashLevel2PairMinMax = groupMinMax(groups.GeoHashLevel2Pair);
    colors = d3.scale.linear().domain(GeoHashLevel2PairMinMax).range(['white', 'red']);
    dc.pieChart("#geohash-level2-chart").dimension(dimensions.GeoHashLevel2Pair).group(groups.GeoHashLevel2Pair).colorCalculator(colors).colorAccessor(function(d) {
      return d.value;
    }).renderLabel(true);
    dc.dataTable(".dc-data-table").dimension(dimensions.Origin).group(function(d) {
      return d;
    }).columns([
      function(d) {
        return d.Origin;
      }, function(d) {
        return d.Origin_Hash;
      }, function(d) {
        return d.Dest;
      }, function(d) {
        return d.Dest_Hash;
      }
    ]).sortBy(function(d) {
      return "" + d.Origin + "-" + d.Dest;
    }).order(d3.ascending);
    return dc.renderAll();
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
